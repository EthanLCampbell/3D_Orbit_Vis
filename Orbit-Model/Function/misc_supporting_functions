void setDir(int motor, int dir){ //Sets motor directions

  if (motor == 1){
    if (dir == -1){
      digitalWrite(motor1Dir2, HIGH);
      digitalWrite(motor1Dir1, LOW);     
    }
    else if (dir == 1){
      digitalWrite(motor1Dir2, LOW);
      digitalWrite(motor1Dir1, HIGH);
    }
  } 
  else if (motor == 2){
    if (dir == -1){
      digitalWrite(motor2Dir2, HIGH);
      digitalWrite(motor2Dir1, LOW);     
    }
    else if (dir == 1){
      digitalWrite(motor2Dir2, LOW);
      digitalWrite(motor2Dir1, HIGH);
    }
  }
}
int sign(double input){ // Custom function for determining the sign of a value (-1 for negative, 1 for positive, 0 for 0

  if (input > 0){return 1;}
  else if (input < 0){return -1;}
  else {return 0;}
}
void HandleButton(void){

  int reading = digitalRead(eStop); //disableButtonState is 1 if the button is pressed, 0 if not
  if(reading != lastDisableButtonState){ //true if the button state has just changed
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > debounceDelay){ //if the state has been the same for more than 5ms
    if (reading != disableButtonState){
        disableButtonState = reading; 
        if (disableButtonState == 1){
          disable = !disable;
          Serial.println("D"+String(disable)); //send updated disable status 
        }
      }
    }
  lastDisableButtonState = reading;
}
void HandleEncoders(void){
  
  currentRaan = raanEnc.read();
  currentRaan /= 8688; //steps per rev 8719
  currentRaan *= 360; //counts per rev
  
  currentInc = incEnc.read();
  currentInc /= 11837;//steps per rev
  currentInc *= 360;//counts per rev
  currentInc -= currentRaan;

  currentIncHall = analogRead(incHallPin);

  if (currentRaan != oldRaan) {
    Serial.print("R");
    Serial.println(currentRaan);
    oldRaan = currentRaan;
  }
  if (currentInc != oldInc) {
    Serial.print("I");
    Serial.println(currentInc);
    oldInc = currentInc;
  }
  /*
  if (currentIncHall != oldIncHall) {
    Serial.print("H");
    Serial.println(currentIncHall);
    oldIncHall = currentIncHall;
  }
  */
}
void HandlePID(void){

  raanError = raanSetpoint - currentRaan;
  raanErrorDer = (raanError - raanErrorPrev) / (millis() - oldTime);
  
  if (abs(raanError) < raanTol){      //error margin. If within this margin, it's "close enough"
    raanError = 0;
    raanErrorInt = 0;
    raanMotorMin = 0;
    raanErrorDer = 0;
  } 
  else if (abs(raanError) < 5){
    raanErrorInt += raanError;
    raanMotorMin = 18;
  } 
  else{
    raanErrorInt = 0;
    raanMotorMin = 15;
  }
  raanSpeed = (int) (raanKp*raanError + raanKi*raanErrorInt + raanKd*raanErrorDer + raanMotorMin*sign(raanError));

  incError = incSetpoint - currentInc;
  incErrorDer = (incError - incErrorPrev)/(millis() - oldTime); //change from milliseconds to seconds
  if (abs(incError) < incTol){      //error margin. If within this margin, it's "close enough"
    incError = 0;
    incErrorInt = 0;
    incMotorMin = 0;
    incErrorDer = 0;
  } 
  else if (abs(incError) < 5){
    incErrorInt += incError;
    incMotorMin = 15;
  } 
  else{
    incMotorMin = 15;
    incErrorInt = 0;
  }
  incSpeed = (int) (incKp*incError + incKi*incErrorInt + incKd*incErrorDer + incMotorMin*sign(incError));
  oldTime = millis(); //change from milliseconds to seconds
}
void CalibrateRaan(void){
  //Serial.println(digitalRead(raanGate));
  if (digitalRead(raanGate) == 1){
    raanSpeed = 80;
  }
  else{
    raanEnc.write(0*(8719/360)); // 0 = degrees offset
    raanCalibrated = 1;  
  } 
}
void CalibrateInc(void){
  raanSetpoint = 0;
  incSetpoint = 999;
  //raanError = raanSetpoint - currentRaan;
  //if (abs(raanError) > raanTol){
  HandlePID();    
  //}
  if (currentIncHall < 700){
    incSpeed = 80;
  }
  else{
    incEnc.write(0);
    incCalibrated = 1;
    incSetpoint = 0;
  }  
}
void Zero(void){
  raanEnc.write(0);
  incEnc.write(0);
  raanSetpoint = 0;
  incSetpoint = 0;
  //mode = 1;
  raanCalibrated = 0;
  incCalibrated = 0;
  //Serial.println("M1");
}
void HandleLaserRelays(int laserCommanded, int laserPower){
  //activate (or deactivate) only the commanded laser, assumes pins are in ascending order 
  digitalWrite(laser1Relay + 2 - (2*laserCommanded), !laserPower);
  Serial.print("L");
  Serial.print(laserCommanded);
  Serial.println(laserPower);
}
void HandleServosManual(int servoCommandedID, int servoCommandedPWM){
  servos.setPWM(servoCommandedID, 0, servoCommandedPWM);
  Serial.print("S");
  Serial.print(servoCommandedID);
  Serial.println(servoCommandedPWM);
}
double MeanAnomalyToTrueAnomaly(double M, double ecc){
  double E;
  if (M < pi){
    E = M + (ecc*1.2*sin(M))/(M+0.07); //this is an analytical approximation I made up to avoid using iterations
  }
  else{
    M = 2*pi - M;
    E = M + (ecc*1.2*sin(M))/(M+0.07);
    E = 2*pi - E;
  }
  double ta = acos((cos(E)-ecc)/(1-ecc*cos(E)));
  if (E > pi){ta = 2*pi - ta;}
  return ta;
  
}
void COEtoCart(){ 
  // turns orbital elements (eccentricity, raan, periapsis, inclination)
  // into cartesian coordinates
  //double p, r;
  if (orbit_e<.01){
    orbit_p = orbit_a;
    orbit_rmag = orbit_p;
  }
  else{
    orbit_p = orbit_a*(1-pow(orbit_e,2));
    orbit_rmag = orbit_p/(1+orbit_e*cos(orbit_ta));
  }

  orbit_rx = orbit_rmag*(cos(orbit_raan)*cos(orbit_ta+orbit_peri) - sin(orbit_raan)*cos(orbit_i)*sin(orbit_ta+orbit_peri));
  orbit_ry = orbit_rmag*(sin(orbit_raan)*cos(orbit_peri+orbit_ta) + cos(orbit_raan)*cos(orbit_i)*sin(orbit_peri+orbit_ta));
  orbit_rz = orbit_rmag*(sin(orbit_i)*sin(orbit_ta+orbit_peri));
}
void InitOrbit(){
  orbit_E = 2*atan(tan(orbit_ta/2)*sqrt((1-orbit_e)/(1+orbit_e)));
  orbit_M = orbit_E - orbit_e*sin(orbit_E);
  orbit_n = sqrt(orbit_mu/pow(orbit_a,3));
}
void HandleOrbit(){
  
  if (millis() - lastOrbitUpdateTime > orbitUpdatePeriod){
    orbit_M = timeWarp*orbit_n*((double)millis())/1000;
    orbit_M = (double)fmod((float)orbit_M,2*pi);
    orbit_ta = MeanAnomalyToTrueAnomaly(orbit_M, orbit_e);
    Serial.print("F");
    Serial.println(orbit_ta*180/pi);
    COEtoCart();
    Cart2Spherical();
    Spherical2PWM();
    // Serial.print(orbit_rx); Serial.print(" "); Serial.print(orbit_ry); Serial.print(" "); Serial.print(orbit_rz); 
    // Serial.println("");
    lastOrbitUpdateTime = millis();
  }
}

void Cart2Spherical(){
  double servoToSatX = orbit_rx - .01;
  double servoToSatY = orbit_ry - 15;
  double servoToSatZ = orbit_rz - 14.5;

//phi (from +Z axis donward)
  elevation = acos(servoToSatZ/(sqrt(pow(servoToSatX,2) + pow(servoToSatY,2) +pow(servoToSatZ,2))));
  elevation *= 180/(pi);
  //elevation for Servo pair 1 is defiend as angle downward from the horizontal
  
  //theta (from +x axis to +y axis)
  azimuth = sign(servoToSatY)*acos(servoToSatX/(pow(servoToSatX,2) + pow(servoToSatY,2)));
  azimuth = atan2(servoToSatY, servoToSatX);
  azimuth *= 180/(pi);
  // Serial.print(servoToSatX);
  // Serial.print(" ");
  // Serial.print(servoToSatY);
  // Serial.print(" ");
  // Serial.println(servoToSatZ);
  // Serial.print(azimuth+90);
  // Serial.print(" ");
  // Serial.println(elevation);
}
void Spherical2PWM(){
 
  // servos.setPWM(0, 0, 500 - 2.33*elevation);
  // servos.setPWM(1, 0, 800 - 10*azimuth);
  // Serial.print("S");
  // Serial.print(0);
  elevation -= 90;
  azimuth+= 90;
  //if (mode == 5){
  servos.setPWM(0, 0, 490 - 2.33*elevation); //490 elevation is straight down
  servos.setPWM(1, 0, 285 - 2.33*azimuth); //285 az is straight across, toward the frame axis
  // Serial.println(500 - .5*elevation);
  //}

}
